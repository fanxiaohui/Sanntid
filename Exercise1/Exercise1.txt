3: Reasons for concurrency and parallelism

(Remember to use all the resources at your disposal. Asking the internet isn't a form of "cheating", it's a way of learning.)

What is concurrency? What is parallelism? What's the difference?
	Concurrency: A software way of making a programs run in parallell. E.g. multiple theards.
	Parallelism: The hardware have multiple cores
Why have machines become increasingly multicore in the past decade?
	Increased demand for speed and more complex program structure
What kinds of problems motivates the need for concurrent execution? (Or phrased differently: What problems do concurrency help in solving?)
	When two or more "programs" have to run in parallell - they can't wait for each other to finnish first, before continuing with the next. 
	Boosts the speed where calculations don't need to be run after each other, but can be done when the processor is avaiable. 
Does creating concurrent programs make the programmer's life easier? Harder? Maybe both? (Come back to this after you have worked on part 4 of this exercise)
	One can more easily make theards run independent of each other. This opens up for a lot of possibilities, but leaves some problems to the programmer. 
	You have to have controll over what happens at all times, now not only one thing happens at a time - multiple things now. 
What are the differences between processes, threads, green threads, and coroutines?
	Processes: Programs that are runing
	Threads: Actions that happens within a process. The smallest sequence of a program. 
	Green threads: The threads are scheduled by the program itself, not the OS. 
	Coroutines: A "process" that 
Which one of these do pthread_create() (C/POSIX), threading.Thread() (Python), go (Go) create?
	C: native
	Python: Native thread
	Go: green
How does pythons Global Interpreter Lock (GIL) influence the way a python Thread behaves? 
	GIL: Prevents multiple native threads to execute at once.
	
With this in mind: What is the workaround for the GIL (Hint: it's another module)?
	Multiprocressesmodule that uses subproceses instead of threads 
What does func GOMAXPROCS(n int) int change?
	 GOMAXPROCS: sets the maximum number of CPUs that can be executing