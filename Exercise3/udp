#include <pthread.h>
#include <stdio.h>
#include <semaphore.h>

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 20017
#define SERVER "129.241.187.255"

// gcc -std=gnu99 -Wall -g -o udp udp_send_recv.c -lpthread

// Note the return type: void*
void* udp_Send(){
  int sock;
  struct sockaddr_in sa;
  int bytes_sent;
  int s = sizeof(sa);
  char buffer[200];
 
  strcpy(buffer, "Halla");
 
  /* create an Internet, datagram, socket using UDP */
  //sock= socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
  
  sock = socket(AF_INET, SOCK_DGRAM, 0);
  int broadcastEnable=1;
  int ret=setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcastEnable, sizeof(broadcastEnable));

  if (-1 == sock) {
      /* if socket failed to initialize, exit */
      printf("Error Creating Socket");
      exit(EXIT_FAILURE);
    }
 
  /* Zero out socket address */
  memset(&sa, 0, sizeof sa);
  
  /* The address is IPv4 */
  sa.sin_family = AF_INET;
 
   /* IPv4 adresses is a uint32_t, convert a string representation of the octets to the appropriate     value */
  //sa.sin_addr.s_addr = inet_addr("129.241.187.255");
  //sa.sin_addr.s_addr = hton1(INADDR_ANY);
  
 	
  /* sockets are unsigned shorts, htons(x) ensures x is in network byte order, set the port to 7654 */
  //sa.sin_port = htons(PORT);

   if(inet_aton(SERVER, &sa.sin_addr) ==0)
   {
	exit(1);
   }
  for(;;){
	for(int i = 20000;i<20024;i++){
		sa.sin_port = htons(i);
  		bytes_sent = sendto(sock, buffer, strlen(buffer), 0,(struct sockaddr*)&sa, s);
  		if (bytes_sent < 0) {
    			printf("Error sending packet: %s\n", strerror(errno));
    			exit(EXIT_FAILURE);
  		}
  	
	}
	printf("Packet sent \n");
	sleep(5);

  }
  close(sock); /* close the socket */

    return NULL;
}

void* udp_Recv(){
  int sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
  struct sockaddr_in sa; 
  char buffer[1024];
  ssize_t recsize;
  socklen_t fromlen;

  memset(&sa, 0, sizeof sa);
  sa.sin_family = AF_INET;
  sa.sin_addr.s_addr = htonl(INADDR_ANY);
  sa.sin_port = htons(20017);
  fromlen = sizeof(sa);

  if (-1 == bind(sock, (struct sockaddr *)&sa, sizeof sa)) {
    perror("error bind failed");
    close(sock);
    exit(EXIT_FAILURE);
  }

  for (;;) {
    //for(int j = 20000;j<20024;j++){
	    //sa.sin_port = htons(j);	
	    recsize = recvfrom(sock, (void*)buffer, sizeof buffer, 0, (struct sockaddr*)&sa, &fromlen);
	    if (recsize < 0) {
	      fprintf(stderr, "%s\n", strerror(errno));
	      exit(EXIT_FAILURE);
	   	 }
	   	printf("recsize: %zu\n ", recsize);
	    	//sleep(0.1);
	    	printf("datagram: %.*s\n", (int)recsize, buffer);
	    }
	    
   // }
    return NULL;
    }


int main(){
	
    pthread_t thread1;
    pthread_t thread2;
    pthread_create(&thread1, NULL, udp_Send, NULL);
    pthread_create(&thread2, NULL, udp_Recv, NULL);
    // Arguments to a thread would be passed here ---------^
    
    if(!pthread_join(thread1, NULL))
        printf("Thread1_join sucsess\n");
    if(!pthread_join(thread2, NULL))
        printf("Thread2_join sucsess\n");
    printf("Hello from main!\n");
    
    return 0;
    
}
